services:
  database:
    image: postgres:18.0-trixie
    container_name: postgres
    restart: unless-stopped
    env_file:
      - ./database/.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", 'pg_isready -U "$${POSTGRES_USER}" -d "$${POSTGRES_DB}"']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app

  cache:
    image: redis:8.2.2-alpine
    container_name: redis
    command: >
      redis-server --appendonly yes --appendfsync everysec
      --save "" --requirepass ${REDIS_PASSWORD}
    # expose only in dev; comment out in prod
    ports:
      - "6379:6379"
    environment:
      - TZ=Europe/Bratislava
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "PING"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app

  backend:
    build:
      context: ./back-end
    container_name: backend
    env_file:
      - ./back-end/.env
    ports:
      - "5000:5000"
    networks:
      - app
    depends_on:
      database:
        condition: service_healthy
      cache:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://127.0.0.1:5000/api/health"]
      interval: 10s
      timeout: 3s
      retries: 5

  frontend:
    build:
      context: ./front-end
    container_name: frontend
    env_file:
      - ./front-end/.env
    ports:
      - "80:80"
    networks:
      - app
    depends_on:
      - backend
    restart: always

volumes:
  postgres_data:
  redis_data:

networks:
  app:
    driver: bridge
